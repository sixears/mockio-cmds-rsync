{-| Interface to the @rsync@ cmdline utility. -}
module MockIO.Cmds.RSync.RSyncUsageError
  ( AsRSyncUsageError(..), RSyncUsageError, throwRSyncUsage )
where

import Base1T

-- base --------------------------------

import GHC.Generics  ( Generic )

-- deepseq -----------------------------

import Control.DeepSeq  ( NFData )

-- text-printer ------------------------

import qualified  Text.Printer  as P

--------------------------------------------------------------------------------

data RSyncUsageError = RSyncUsageError { _txt ‚à∑ ùïã, _callstack ‚à∑ CallStack }
  deriving (Generic,NFData,Show)

----------------------------------------

instance Exception RSyncUsageError

----------------------------------------

instance Eq RSyncUsageError where
  (RSyncUsageError a _) == (RSyncUsageError b _) = a == b

----------------------------------------

instance HasCallstack RSyncUsageError where
  callstack = lens _callstack (\ eu cs ‚Üí eu { _callstack = cs })

----------------------------------------

class AsRSyncUsageError Œµ where
  _RSyncUsageError ‚à∑ Prism' Œµ RSyncUsageError

--------------------

instance AsRSyncUsageError RSyncUsageError where
  _RSyncUsageError = id

--------------------

instance Printable RSyncUsageError where
  print = P.text ‚àò _txt

------------------------------------------------------------

rsyncUsageError ‚à∑ ‚àÄ œÑ Œµ . (AsRSyncUsageError Œµ, Printable œÑ, HasCallStack) ‚áí
                  œÑ ‚Üí Œµ
rsyncUsageError t = _RSyncUsageError # RSyncUsageError (toText t) callStack

----------------------------------------

throwRSyncUsage ‚à∑ ‚àÄ œÑ Œµ œâ Œ∑ .
                  (Printable œÑ, AsRSyncUsageError Œµ, MonadError Œµ Œ∑) ‚áí œÑ ‚Üí Œ∑ œâ
throwRSyncUsage t = throwError $ rsyncUsageError t

-- that's all, folks! ----------------------------------------------------------
