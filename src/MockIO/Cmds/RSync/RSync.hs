{-| Interface to the @rsync@ cmdline utility. -}
module MockIO.Cmds.RSync.RSync
  ( -- re-exports for user convenience
    AsRSyncUsageError(..), RSyncDeleteOpt(..), RSyncOpt(..), RSyncUsageError
  , rsync, rsync', rsyncArchive, rsyncArchiveOpts, rsyncArgs, rsyncOpts
  )
where

import Base1T

-- containers --------------------------

import qualified  Data.Set  as  Set

-- fpath -------------------------------

import FPath.Error.FPathError  ( AsFPathError )

-- lens --------------------------------

import Control.Lens.Getter  ( view )

-- log-plus ----------------------------

import Log  ( Log )

-- logging-effect ----------------------

import Control.Monad.Log  ( MonadLog, Severity )

-- mockio ------------------------------

import MockIO.DoMock  ( HasDoMock( doMock ) )

-- mockio-log --------------------------

import MockIO.MockIOClass  ( MockIOClass )

-- mockio-plus -------------------------

import MockIO.Process  ( Íô© )

-- monadio-plus ------------------------

import MonadIO.Error.CreateProcError  ( AsCreateProcError )
import MonadIO.Error.ProcExitError    ( AsProcExitError )

-- mtl ---------------------------------

import Control.Monad.Reader  ( MonadReader, asks )

-- safe --------------------------------

import Safe  ( succSafe )

-- stdmain -----------------------------

import StdMain.ProcOutputParseError ( AsProcOutputParseError )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import qualified MockIO.Cmds.RSync.Paths  as  Paths
import MockIO.Cmds.RSync.RSyncOpt        ( RSyncDeleteOpt(..), RSyncOpt(..)
                                         , rsyncArchiveOpts,rsyncOpts )
import MockIO.Cmds.RSync.RSyncUsageError ( AsRSyncUsageError(..)
                                         , RSyncUsageError )
import MockIO.Cmds.RSync.ToRSyncArgs     ( ToRSyncArgs, rsyncArgs, logRSyncMsg )

--------------------------------------------------------------------------------

{-| Run an @rsync@.  The args are user-provided, and not checked.  No basic
    rsync message is emitted. -}
rsync' ‚à∑ ‚àÄ Œµ œÅ Œº .
        (MonadIO Œº, HasDoMock œÅ, MonadReader œÅ Œº,
         AsProcOutputParseError Œµ, AsProcExitError Œµ, AsCreateProcError Œµ,
         AsFPathError Œµ, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº, HasCallStack,
         MonadLog (Log MockIOClass) Œº) ‚áí
        Severity ‚Üí [ùïã] ‚Üí Œº ()
rsync' sev full_args = snd ‚ä≥ Íô© (Paths.rsync, full_args, succSafe sev)

--------------------

{-| Run an @rsync@. A basic rsync message is emitted; further cmd messages
    are made at @sev+1@. -}
rsync ‚à∑ ‚àÄ Œµ Œ± œÅ Œº .
        (MonadIO Œº, ToRSyncArgs Œ±, HasDoMock œÅ, MonadReader œÅ Œº,
         AsProcOutputParseError Œµ, AsProcExitError Œµ, AsCreateProcError Œµ,
         AsFPathError Œµ, AsIOError Œµ, AsRSyncUsageError Œµ,
         Printable Œµ, MonadError Œµ Œº, HasCallStack,
         MonadLog (Log MockIOClass) Œº) ‚áí
        Severity ‚Üí Set.Set RSyncOpt ‚Üí Œ± ‚Üí Œº ()
rsync sev opts args = do
  do_mock ‚Üê asks (view doMock)
  logRSyncMsg sev args do_mock
  rsyncArgs opts args ‚â´ rsync' sev

----------------------------------------

{-| Run an @rsync@, with the explicit equivalent of @--archive@ in addition to
    the given options.  This throws back any `RSyncUsageError` independently
    to allow it to be munged. -}
rsyncArchive ‚à∑ ‚àÄ Œµ' Œµ Œ± œÅ Œ∑ Œº .
               (MonadIO Œº, ToRSyncArgs Œ±, HasDoMock œÅ, MonadReader œÅ Œº,
                AsProcOutputParseError Œµ, AsProcExitError Œµ,AsCreateProcError Œµ,
                AsFPathError Œµ, AsIOError Œµ,
                Printable Œµ, MonadError Œµ Œº, HasCallStack,
                AsRSyncUsageError Œµ', Printable Œµ', MonadError Œµ' Œ∑,
                MonadLog (Log MockIOClass) Œº) ‚áí
               Severity ‚Üí Set.Set RSyncOpt ‚Üí Œ± ‚Üí Œ∑ (Œº ())
rsyncArchive sev opts args =
  let rsync_opts = Set.union rsyncArchiveOpts opts
   in case rsyncArgs rsync_opts args of
        ùï∑ e  ‚Üí throwError e
        ùïΩ as ‚Üí return $ do
          do_mock ‚Üê asks (view doMock)
          logRSyncMsg sev args do_mock
          rsync' sev as

-- that's all, folks! ----------------------------------------------------------
